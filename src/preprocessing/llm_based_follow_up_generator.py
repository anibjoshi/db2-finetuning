from openai import OpenAI
import json

# Initialize the OpenAI client
client = OpenAI(api_key='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')

def generate_follow_up(conversation: dict) -> str:
    """Generate a follow-up question based on the entire conversation JSON.

    Args:
        conversation: The JSON object representing the conversation.

    Returns:
        A follow-up question generated by the model.
    """
    try:
        completion = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "You are a user troubleshooting a Db2 database error, looking for guidance from an Db2 focusedAI assistant."},
                {"role": "user", "content": f"""
                    Based on the following conversation, generate a follow-up question from the perspective of a user who is still trying to troubleshoot the issue. 
                    The question should ask for clarification or additional guidance from the AI assistant. Do not assume the user knows advanced troubleshooting steps or system-level configurations. 
                    Keep the question simple and aligned with the current topic, avoiding speculative or expert-level suggestions:
                    
                    {json.dumps(conversation, indent=2)}
                """}
            ],
            max_tokens=50,
            temperature=0.5
        )


        follow_up_question = completion.choices[0].message.content.strip()
        return follow_up_question
    except Exception as e:
        print(f"Error generating follow-up: {e}")
        return ""

def process_conversations(file_path: str, limit: int = 3):
    """Process a limited number of lines in the JSONL file and generate follow-up questions.

    Args:
        file_path: Path to the JSONL file containing conversations.
        limit: Number of lines to process.
    """

    with open(file_path, 'r') as file:
        for i, line in enumerate(file):
            if i >= limit:
                break
            conversation = json.loads(line)
            follow_up = generate_follow_up(conversation)
            print(f"Follow-up Question: {follow_up}\n")

if __name__ == "__main__":
    process_conversations('src/data/processed/SQL_codes_first_turn_conversations.jsonl', limit=10)
